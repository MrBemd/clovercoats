{"version":3,"sources":["features/scoreList/scoreListSlice.js","features/scoreList/ScoreList.js","App.js","store.js","serviceWorker.js","index.js"],"names":["slice","createSlice","name","initialState","lastRound","score","key","round","wij","zij","reducers","addScore","state","action","push","payload","deleteScore","filter","itm","getScore","actions","ScoreList","dispatch","useDispatch","useState","isModalVisible","setIsModalVisible","scoreWij","setScoreWij","scoreZij","setScoreZij","useSelector","columns","title","dataIndex","render","className","DeleteOutlined","onClick","dataSource","pagination","locale","emptyText","summary","pageData","totalWij","totalZij","forEach","type","onCancel","centered","visible","footer","value","min","max","onChange","diff","App","configureStore","reducer","scoreReducer","Boolean","window","location","hostname","match","ReactDOM","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3f7a8757.chunk.js","sourcesContent":["import {createSlice} from '@reduxjs/toolkit';\n\nexport const slice = createSlice({\n  name: 'score',\n  initialState: {\n    lastRound: 2,\n    score: [\n      {\n        key: 0,\n        round: 1,\n        wij: 120,\n        zij: 43\n      },\n      {\n        key: 1,\n        round: 2,\n        wij: 120,\n        zij: 43\n      }\n    ]\n  },\n  reducers: {\n    addScore: (state, action) => {\n      state.lastRound++;\n      state.score.push({\n        key: state.lastRound - 1,\n        round: state.lastRound,\n        wij: action.payload.wij,\n        zij: action.payload.zij\n      });\n    },\n    deleteScore: (state, action) => {\n\n      state.score = state.score.filter((itm) => {return itm.key !== action.payload;});\n\n      // reset lastRound\n      if (state.lastRound > 0) {\n        state.lastRound--;\n      }\n\n    }\n  }\n});\n\nexport const getScore = state => state.score.score;\nexport const {addScore, deleteScore} = slice.actions;\n\nexport default slice.reducer;\n","import React, {useState} from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\nimport {\n  getScore,\n  addScore,\n  deleteScore\n} from './scoreListSlice';\nimport {Table, Modal, Button, InputNumber} from 'antd';\nimport {DeleteOutlined} from '@ant-design/icons';\n\nexport function ScoreList () {\n  const dispatch = useDispatch();\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [scoreWij, setScoreWij] = useState(0);\n  const [scoreZij, setScoreZij] = useState(0);\n  const score = useSelector(getScore);\n  const columns = [\n    {\n      title: 'Ronde',\n      dataIndex: 'round',\n      key: 'round'\n    },\n    {\n      title: 'Wij',\n      dataIndex: 'wij',\n      key: 'wij'\n    },\n    {\n      title: 'Zij',\n      dataIndex: 'zij',\n      key: 'zij'\n    },\n    {\n      title: '',\n      key: 'delete',\n      render: (itm) => {\n        return <div className='deleteButton'><DeleteOutlined onClick={() => {dispatch(deleteScore(itm.key));}} /></div>;\n      }\n    }\n  ];\n\n  return (\n    <div>\n      <Table\n        dataSource={score}\n        columns={columns}\n        pagination={false}\n        locale={{\n          emptyText: 'Nog geen score vastgelegd'\n        }}\n        summary={pageData => {\n          let totalWij = 0;\n          let totalZij = 0;\n\n          pageData.forEach(({wij, zij}) => {\n            totalWij += wij;\n            totalZij += zij;\n          });\n\n          return (\n            <>\n              <tr>\n                <th>Totaal</th>\n                <td>\n                  <strong>{totalWij}</strong>\n                </td>\n                <td>\n                  <strong>{totalZij}</strong>\n                </td>\n                <td />\n              </tr>\n            </>\n          );\n        }} />\n\n      <div className='buttonContainer'>\n        <Button type='primary' onClick={() => setIsModalVisible(true)}>\n          Score invoeren\n        </Button>\n      </div>\n\n      <Modal\n        onCancel={() => setIsModalVisible(false)}\n        title='Voer een nieuwe score in'\n        centered\n        visible={isModalVisible}\n        footer={[\n          <Button key='back' onClick={() => setIsModalVisible(false)}>\n            Annuleren\n          </Button>,\n          <Button key='submit' type='primary' onClick={() => {\n            dispatch(addScore({wij: scoreWij, zij: scoreZij}));\n            setIsModalVisible(false);\n            setScoreZij(0);\n            setScoreWij(0);\n          }}>\n            Opslaan\n          </Button>\n        ]}\n      >\n        <div className='inputScore'>\n          <InputNumber\n            value={scoreWij}\n            min={0}\n            max={262}\n            onChange={(value) => {\n              const diff = (162 - value) > 0 ? 162 - value : 0;\n              setScoreWij(value);\n              setScoreZij(diff);\n            }}\n          />\n          <InputNumber\n            value={scoreZij}\n            min={0}\n            max={262}\n            onChange={(value) => {\n              const diff = (162 - value) > 0 ? 162 - value : 0;\n              setScoreZij(value);\n              setScoreWij(diff);\n            }}\n          />\n        </div>\n      </Modal>\n    </div>\n  );\n}\n","import React from 'react';\r\nimport {ScoreList} from './features/scoreList/ScoreList';\r\nimport './App.css';\r\n\r\nfunction App () {\r\n  return (\r\n    <div className='App'>\r\n      <div className='container'>\r\n        <ScoreList />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import {configureStore} from '@reduxjs/toolkit';\r\nimport scoreReducer from './features/scoreList/scoreListSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    score: scoreReducer\r\n  }\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}